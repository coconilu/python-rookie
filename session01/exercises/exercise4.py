#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Session01 练习题4：简单计算器

题目描述：
编写一个简单的计算器程序，要求：
1. 提示用户输入两个数字
2. 对这两个数字进行加、减、乘、除、取余、幂运算
3. 以表格形式美观地显示所有运算结果
4. 处理除零错误
5. 添加输入验证

输入示例：
请输入第一个数字: 10
请输入第二个数字: 3

输出示例：
╔════════════════════════════════╗
║           计算结果             ║
╠════════════════════════════════╣
║ 运算类型    │ 表达式  │ 结果   ║
╠════════════════════════════════╣
║ 加法        │ 10 + 3  │ 13     ║
║ 减法        │ 10 - 3  │ 7      ║
║ 乘法        │ 10 × 3  │ 30     ║
║ 除法        │ 10 ÷ 3  │ 3.33   ║
║ 整除        │ 10 // 3 │ 3      ║
║ 取余        │ 10 % 3  │ 1      ║
║ 幂运算      │ 10 ** 3 │ 1000   ║
╚════════════════════════════════╝

提示：
- 使用float()转换输入为浮点数
- 使用try-except处理输入错误和除零错误
- 使用格式化字符串控制小数位数
- 可以使用Unicode字符美化表格
- 注意除法结果的格式化显示
"""

# 在这里编写你的代码

def solution():
    """
    在这里实现你的解决方案
    """
    # TODO: 在这里编写你的代码
    # 提示：
    # 1. 获取两个数字输入并转换为float
    # 2. 进行各种数学运算
    # 3. 处理除零情况：if num2 != 0
    # 4. 使用f-string格式化输出：{result:.2f}
    # 5. 创建美观的表格输出格式
    
    pass  # 删除这行，开始编写你的代码


if __name__ == "__main__":
    solution()