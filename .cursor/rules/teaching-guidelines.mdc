---
description: 
globs: 
alwaysApply: false
---
# Python 教学内容编写指南

## 代码示例编写原则

### 1. 初学者友好
```python
# ❌ 不好的示例：过于简洁，缺少解释
result = sum(x**2 for x in range(10) if x % 2 == 0)

# ✅ 好的示例：分步骤，有注释
# 计算 0-9 中偶数的平方和
numbers = range(10)  # 创建 0-9 的数字序列
even_numbers = []    # 存储偶数

# 找出所有偶数
for x in numbers:
    if x % 2 == 0:  # 如果 x 除以 2 的余数为 0，说明是偶数
        even_numbers.append(x)

# 计算平方和
result = 0
for x in even_numbers:
    square = x ** 2  # 计算平方
    result += square  # 累加到结果中

print(f"偶数的平方和是: {result}")  # 输出: 偶数的平方和是: 120
```

### 2. 渐进式学习
- 前期课程避免使用高级特性（列表推导式、装饰器、生成器等）
- 先展示基础写法，再逐步引入高级写法
- 每个新概念都要有充分的解释

### 3. 错误处理示例
```python
# 展示常见错误和解决方法
def divide_numbers(a, b):
    """除法运算示例，包含错误处理"""
    try:
        result = a / b
        return result
    except ZeroDivisionError:
        print("错误：不能除以零！")
        return None
    except TypeError:
        print("错误：请输入数字！")
        return None

# 测试各种情况
print(divide_numbers(10, 2))    # 正常情况：5.0
print(divide_numbers(10, 0))    # 除零错误
print(divide_numbers(10, "2"))  # 类型错误
```

## 项目结构规范

### 每个 session 的标准结构
```
sessionXX/
├── README.md           # 课程概述，包含学习目标、知识点、预期成果
├── tutorial.md         # 详细教程，理论讲解 + 代码示例
├── demo.py            # 完整的演示代码，展示本课所有知识点
├── examples/          # 单个知识点的示例
│   ├── example1.py    # 知识点1的示例
│   ├── example2.py    # 知识点2的示例
│   └── example3.py    # 知识点3的示例
├── exercises/         # 练习题目
│   ├── exercise1.py   # 基础练习
│   ├── exercise2.py   # 进阶练习
│   └── exercise3.py   # 挑战练习
├── solutions/         # 练习题答案
│   └── ...
└── project/          # 本课的实战项目
    ├── README.md     # 项目说明
    └── main.py       # 项目主文件
```

## 文档编写规范

### README.md 模板
```markdown
# 第X课：课程标题

## 学习目标
- 目标1：具体、可衡量
- 目标2：与实际应用相关
- 目标3：循序渐进

## 知识点
1. **知识点1**
   - 概念解释
   - 应用场景
   
2. **知识点2**
   - 概念解释
   - 应用场景

## 预期成果
完成本课学习后，你将能够：
- 成果1
- 成果2

## 练习说明
- 练习1：基础 - 描述
- 练习2：进阶 - 描述
- 练习3：挑战 - 描述

## 项目预览
本课将完成一个[项目名称]，实现以下功能：
- 功能1
- 功能2
```

### tutorial.md 编写要点
1. 从生活实例引入概念
2. 用类比帮助理解
3. 提供多个示例，从简单到复杂
4. 包含常见错误和调试方法
5. 总结关键点

## 练习题设计原则

### 难度递进
1. **基础练习**（exercise1）
   - 直接应用刚学的知识
   - 有明确的输入输出要求
   - 提供测试用例

2. **进阶练习**（exercise2）
   - 结合之前学过的知识
   - 需要一定的思考
   - 有多种解决方案

3. **挑战练习**（exercise3）
   - 接近实际应用场景
   - 需要查阅文档
   - 鼓励创新解决方案

### 练习题模板
```python
"""
练习 X.1：练习标题

任务描述：
详细说明要实现什么功能

要求：
1. 要求1
2. 要求2

示例：
输入：xxx
输出：xxx

提示：
- 提示1
- 提示2
"""

def your_function():
    # TODO: 在这里实现你的代码
    pass

# 测试代码
if __name__ == "__main__":
    # 测试用例1
    # 测试用例2
    pass
```

## 项目设计指南

### 项目选择标准
1. **实用性**：解决实际问题
2. **趣味性**：让学习过程有趣
3. **适度性**：难度适中，不超出当前知识范围
4. **扩展性**：可以在后续课程中继续完善

### 项目代码组织
```python
"""
项目名称：XXX
功能描述：XXX
作者：学员姓名
日期：YYYY-MM-DD
"""

# 导入必要的模块
import os
import sys

# 常量定义
CONSTANT_NAME = "value"

# 函数定义
def main():
    """主函数"""
    pass

# 程序入口
if __name__ == "__main__":
    main()
```

## 特殊注意事项

### 跨平台兼容性
- 使用 `pathlib` 处理路径
- 避免使用系统特定的命令
- 文件编码统一使用 UTF-8

### 中文支持
- 所有 Python 文件开头添加编码声明（Python 3 可选）
- 变量名使用英文，注释可以用中文
- 输出信息使用中文，方便初学者理解

### 依赖管理
- 每个阶段的新依赖都要在 [pyproject.toml](mdc:pyproject.toml) 中明确标注
- 提供依赖安装说明
- 尽量使用稳定版本

## 质量检查清单

发布前检查：
- [ ] 所有代码都能正常运行
- [ ] 注释清晰完整
- [ ] 文档格式正确
- [ ] 练习题有对应的答案
- [ ] 项目有完整的 README
- [ ] 符合 PEP 8 规范
- [ ] 在 Windows/Mac/Linux 上测试通过
