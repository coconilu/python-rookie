version: '3.8'

services:
  # Flask应用服务
  web:
    build: .
    image: flask-deploy-demo:latest
    container_name: flask-app
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - SECRET_KEY=${SECRET_KEY:-default-dev-key-change-in-production}
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Nginx服务 - 反向代理和静态文件服务
  nginx:
    image: nginx:1.21-alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - app-network

  # Redis服务 - 用于缓存和会话存储
  redis:
    image: redis:6-alpine
    container_name: redis
    restart: always
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Prometheus服务 - 监控指标收集
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - app-network

  # Grafana服务 - 监控数据可视化
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: