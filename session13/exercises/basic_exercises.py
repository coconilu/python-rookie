#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Pandas基础练习题

本文件包含Pandas基础操作的练习题，涵盖：
- DataFrame和Series基础操作
- 数据选择和筛选
- 数据清洗
- 基本统计分析
- 数据分组和聚合

作者: Python教程团队
创建日期: 2024-01-01
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# 设置中文显示
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False


def exercise_1_basic_operations():
    """
    练习1: DataFrame和Series基础操作
    
    任务：
    1. 创建一个包含学生信息的DataFrame
    2. 添加新列
    3. 修改数据
    4. 基本信息查看
    """
    print("=== 练习1: DataFrame和Series基础操作 ===")
    
    # TODO: 创建学生信息DataFrame
    # 包含列：姓名、年龄、性别、数学成绩、英语成绩、科学成绩
    # 至少包含10个学生的数据
    
    # 提示：可以使用以下数据
    students_data = {
        '姓名': ['张三', '李四', '王五', '赵六', '钱七', '孙八', '周九', '吴十', '郑一', '王二'],
        '年龄': [18, 19, 18, 20, 19, 18, 19, 20, 18, 19],
        '性别': ['男', '女', '男', '女', '男', '女', '男', '女', '男', '女'],
        '数学成绩': [85, 92, 78, 96, 88, 91, 83, 87, 94, 89],
        '英语成绩': [78, 85, 92, 88, 83, 94, 86, 91, 87, 90],
        '科学成绩': [88, 91, 85, 93, 86, 89, 90, 88, 92, 87]
    }
    
    # 你的代码开始
    # df = pd.DataFrame(...)
    
    # TODO: 1. 查看DataFrame的基本信息
    # 使用 .info(), .describe(), .head(), .shape 等方法
    
    # TODO: 2. 添加新列 '总分' 和 '平均分'
    # 总分 = 数学成绩 + 英语成绩 + 科学成绩
    # 平均分 = 总分 / 3
    
    # TODO: 3. 添加新列 '等级'
    # 平均分 >= 90: 'A'
    # 平均分 >= 80: 'B' 
    # 平均分 >= 70: 'C'
    # 平均分 < 70: 'D'
    
    # TODO: 4. 修改某个学生的成绩
    # 将张三的数学成绩改为90
    
    # TODO: 5. 查看修改后的数据
    
    print("\n练习1完成提示：")
    print("- 创建了包含学生信息的DataFrame")
    print("- 添加了总分、平均分和等级列")
    print("- 修改了特定学生的成绩")
    print("- 查看了数据的基本信息")
    
    # 返回DataFrame供后续练习使用
    return None  # 替换为你创建的DataFrame


def exercise_2_data_selection():
    """
    练习2: 数据选择和筛选
    
    任务：
    1. 选择特定列
    2. 条件筛选
    3. 多条件筛选
    4. 使用iloc和loc
    """
    print("\n=== 练习2: 数据选择和筛选 ===")
    
    # 创建示例数据
    data = {
        '产品名称': ['手机A', '手机B', '电脑A', '电脑B', '平板A', '平板B', '手机C', '电脑C'],
        '类别': ['手机', '手机', '电脑', '电脑', '平板', '平板', '手机', '电脑'],
        '价格': [2999, 3999, 5999, 7999, 2499, 3499, 1999, 6999],
        '销量': [150, 120, 80, 60, 100, 90, 200, 70],
        '评分': [4.2, 4.5, 4.3, 4.6, 4.1, 4.4, 3.9, 4.5],
        '库存': [50, 30, 20, 15, 40, 25, 80, 18]
    }
    
    df = pd.DataFrame(data)
    print("原始数据：")
    print(df)
    
    # TODO: 1. 选择特定列
    # 选择 '产品名称', '价格', '销量' 三列
    
    # TODO: 2. 条件筛选
    # 筛选价格大于3000的产品
    
    # TODO: 3. 多条件筛选
    # 筛选价格大于3000且销量大于100的产品
    
    # TODO: 4. 筛选特定类别
    # 筛选类别为'手机'的产品
    
    # TODO: 5. 使用isin()方法
    # 筛选类别为'手机'或'平板'的产品
    
    # TODO: 6. 使用iloc选择
    # 选择前3行和前4列
    
    # TODO: 7. 使用loc选择
    # 选择索引0到2的行，列'产品名称'到'销量'
    
    # TODO: 8. 复杂筛选
    # 筛选评分大于4.0且库存小于50的产品
    
    print("\n练习2完成提示：")
    print("- 学会了选择特定列")
    print("- 掌握了单条件和多条件筛选")
    print("- 使用了iloc和loc进行位置和标签选择")
    print("- 进行了复杂条件筛选")


def exercise_3_data_cleaning():
    """
    练习3: 数据清洗
    
    任务：
    1. 处理缺失值
    2. 处理重复值
    3. 数据类型转换
    4. 异常值处理
    """
    print("\n=== 练习3: 数据清洗 ===")
    
    # 创建包含问题的示例数据
    dirty_data = {
        '姓名': ['张三', '李四', '王五', '张三', '赵六', None, '钱七', '孙八'],
        '年龄': [25, 30, None, 25, 35, 28, 150, '32'],  # 包含缺失值、重复值、异常值、类型错误
        '工资': ['5000', '6000', '7000', '5000', None, '5500', '8000', '6500'],
        '部门': ['IT', 'HR', 'IT', 'IT', 'Finance', 'HR', None, 'IT'],
        '入职日期': ['2020-01-01', '2019-05-15', '2021-03-10', '2020-01-01', 
                   '2018-12-01', '2020-07-20', '2022-02-14', '2021-11-30']
    }
    
    df = pd.DataFrame(dirty_data)
    print("原始脏数据：")
    print(df)
    print("\n数据信息：")
    print(df.info())
    
    # TODO: 1. 检查缺失值
    # 使用 .isnull(), .isna(), .isnull().sum() 等方法
    
    # TODO: 2. 处理缺失值
    # 删除姓名为空的行
    # 用平均值填充年龄的缺失值
    # 用众数填充部门的缺失值
    # 用中位数填充工资的缺失值
    
    # TODO: 3. 检查重复值
    # 使用 .duplicated() 方法检查重复行
    
    # TODO: 4. 删除重复值
    # 保留第一次出现的记录
    
    # TODO: 5. 数据类型转换
    # 将年龄转换为整数类型
    # 将工资转换为浮点数类型
    # 将入职日期转换为日期类型
    
    # TODO: 6. 异常值处理
    # 处理年龄中的异常值（如150岁）
    # 可以用合理值替换或删除
    
    # TODO: 7. 数据验证
    # 检查清洗后的数据质量
    
    print("\n练习3完成提示：")
    print("- 识别和处理了缺失值")
    print("- 发现和删除了重复值")
    print("- 进行了数据类型转换")
    print("- 处理了异常值")
    print("- 验证了数据清洗效果")


def exercise_4_basic_statistics():
    """
    练习4: 基本统计分析
    
    任务：
    1. 描述性统计
    2. 分组统计
    3. 相关性分析
    4. 数据可视化
    """
    print("\n=== 练习4: 基本统计分析 ===")
    
    # 创建销售数据
    np.random.seed(42)
    sales_data = {
        '销售员': ['张三', '李四', '王五', '赵六', '钱七'] * 20,
        '产品': np.random.choice(['产品A', '产品B', '产品C'], 100),
        '销售额': np.random.normal(5000, 1500, 100),
        '销售数量': np.random.poisson(10, 100),
        '客户满意度': np.random.uniform(3.0, 5.0, 100),
        '销售月份': np.random.choice(range(1, 13), 100)
    }
    
    df = pd.DataFrame(sales_data)
    df['销售额'] = df['销售额'].round(2)
    df['客户满意度'] = df['客户满意度'].round(1)
    
    print("销售数据预览：")
    print(df.head())
    
    # TODO: 1. 基本描述性统计
    # 使用 .describe() 查看数值列的统计信息
    
    # TODO: 2. 分类变量统计
    # 统计每个销售员的销售次数
    # 统计每个产品的销售次数
    
    # TODO: 3. 按销售员分组分析
    # 计算每个销售员的：
    # - 总销售额
    # - 平均销售额
    # - 销售次数
    # - 平均客户满意度
    
    # TODO: 4. 按产品分组分析
    # 计算每个产品的：
    # - 总销售额
    # - 平均销售额
    # - 总销售数量
    # - 平均客户满意度
    
    # TODO: 5. 按月份分组分析
    # 计算每个月的总销售额和平均销售额
    
    # TODO: 6. 相关性分析
    # 计算销售额、销售数量、客户满意度之间的相关系数
    
    # TODO: 7. 数据可视化
    # 绘制销售额的直方图
    # 绘制各销售员的销售额对比图
    # 绘制销售额和客户满意度的散点图
    
    print("\n练习4完成提示：")
    print("- 进行了描述性统计分析")
    print("- 按不同维度进行了分组分析")
    print("- 计算了变量间的相关性")
    print("- 创建了基本的数据可视化")


def exercise_5_groupby_operations():
    """
    练习5: 分组和聚合操作
    
    任务：
    1. 单列分组
    2. 多列分组
    3. 多种聚合函数
    4. 自定义聚合函数
    """
    print("\n=== 练习5: 分组和聚合操作 ===")
    
    # 创建订单数据
    np.random.seed(42)
    orders_data = {
        '订单ID': range(1, 201),
        '客户ID': np.random.choice(range(1, 51), 200),
        '产品类别': np.random.choice(['电子产品', '服装', '食品', '家居'], 200),
        '订单金额': np.random.exponential(100, 200),
        '订单日期': pd.date_range('2024-01-01', periods=200, freq='D')[:200],
        '客户类型': np.random.choice(['新客户', '老客户'], 200, p=[0.3, 0.7]),
        '支付方式': np.random.choice(['信用卡', '支付宝', '微信支付'], 200),
        '配送方式': np.random.choice(['标准配送', '快速配送'], 200, p=[0.7, 0.3])
    }
    
    df = pd.DataFrame(orders_data)
    df['订单金额'] = df['订单金额'].round(2)
    df['月份'] = df['订单日期'].dt.month
    
    print("订单数据预览：")
    print(df.head())
    
    # TODO: 1. 按产品类别分组
    # 计算每个产品类别的：
    # - 订单数量
    # - 总销售额
    # - 平均订单金额
    # - 最大订单金额
    # - 最小订单金额
    
    # TODO: 2. 按客户类型分组
    # 比较新客户和老客户的消费行为
    
    # TODO: 3. 按月份分组
    # 分析每月的销售趋势
    
    # TODO: 4. 多列分组
    # 按产品类别和客户类型分组
    # 分析不同客户类型在不同产品类别上的消费差异
    
    # TODO: 5. 按支付方式和配送方式分组
    # 分析不同支付和配送方式组合的订单特征
    
    # TODO: 6. 自定义聚合函数
    # 定义一个函数计算变异系数（标准差/均值）
    # 应用到订单金额的分析中
    
    # TODO: 7. 复杂聚合
    # 使用agg()方法对不同列应用不同的聚合函数
    
    # TODO: 8. 透视表
    # 创建产品类别 vs 客户类型的透视表
    # 显示平均订单金额
    
    print("\n练习5完成提示：")
    print("- 掌握了单列和多列分组")
    print("- 使用了多种聚合函数")
    print("- 创建了自定义聚合函数")
    print("- 制作了透视表")


def exercise_6_time_series_basic():
    """
    练习6: 时间序列基础
    
    任务：
    1. 时间序列创建
    2. 时间索引操作
    3. 重采样
    4. 滑动窗口
    """
    print("\n=== 练习6: 时间序列基础 ===")
    
    # 创建时间序列数据
    np.random.seed(42)
    dates = pd.date_range('2024-01-01', periods=365, freq='D')
    
    # 模拟股价数据
    price_changes = np.random.normal(0, 1, 365)
    prices = 100 + np.cumsum(price_changes)
    
    # 模拟交易量
    volumes = np.random.poisson(1000, 365)
    
    stock_data = pd.DataFrame({
        '收盘价': prices,
        '交易量': volumes
    }, index=dates)
    
    print("股价数据预览：")
    print(stock_data.head())
    
    # TODO: 1. 时间索引操作
    # 选择2024年3月的数据
    # 选择2024年第一季度的数据
    # 选择周末的数据
    
    # TODO: 2. 添加时间特征
    # 添加月份、星期几、是否周末等列
    
    # TODO: 3. 重采样操作
    # 将日数据重采样为周数据（计算周平均价格和周总交易量）
    # 将日数据重采样为月数据
    
    # TODO: 4. 滑动窗口计算
    # 计算5日移动平均价格
    # 计算20日移动平均价格
    # 计算5日移动平均交易量
    
    # TODO: 5. 价格变化分析
    # 计算日收益率（当日价格相对前一日的变化百分比）
    # 计算累计收益率
    
    # TODO: 6. 技术指标
    # 计算布林带（移动平均 ± 2倍标准差）
    # 计算RSI指标（相对强弱指数）的简化版本
    
    # TODO: 7. 数据可视化
    # 绘制价格走势图
    # 绘制价格和移动平均线
    # 绘制交易量图
    
    print("\n练习6完成提示：")
    print("- 学会了时间序列的创建和索引")
    print("- 掌握了重采样技术")
    print("- 计算了滑动窗口指标")
    print("- 进行了时间序列可视化")


def exercise_7_data_merging():
    """
    练习7: 数据合并和连接
    
    任务：
    1. 使用merge()合并数据
    2. 使用concat()连接数据
    3. 使用join()连接数据
    4. 处理合并中的问题
    """
    print("\n=== 练习7: 数据合并和连接 ===")
    
    # 创建多个相关的数据表
    
    # 客户信息表
    customers = pd.DataFrame({
        '客户ID': [1, 2, 3, 4, 5],
        '客户名称': ['公司A', '公司B', '公司C', '公司D', '公司E'],
        '行业': ['科技', '金融', '制造', '零售', '教育'],
        '城市': ['北京', '上海', '广州', '深圳', '杭州']
    })
    
    # 订单信息表
    orders = pd.DataFrame({
        '订单ID': [101, 102, 103, 104, 105, 106],
        '客户ID': [1, 2, 1, 3, 2, 6],  # 注意：客户ID=6在客户表中不存在
        '订单金额': [10000, 15000, 8000, 12000, 20000, 5000],
        '订单日期': ['2024-01-15', '2024-01-20', '2024-02-01', '2024-02-10', '2024-02-15', '2024-03-01']
    })
    
    # 产品信息表
    products = pd.DataFrame({
        '产品ID': ['P001', 'P002', 'P003', 'P004'],
        '产品名称': ['笔记本电脑', '台式机', '打印机', '投影仪'],
        '单价': [5000, 3000, 1200, 8000],
        '类别': ['电脑', '电脑', '办公设备', '办公设备']
    })
    
    # 订单详情表
    order_details = pd.DataFrame({
        '订单ID': [101, 101, 102, 103, 104, 105, 106],
        '产品ID': ['P001', 'P003', 'P002', 'P001', 'P004', 'P002', 'P003'],
        '数量': [2, 1, 5, 1, 1, 6, 4]
    })
    
    print("客户信息表：")
    print(customers)
    print("\n订单信息表：")
    print(orders)
    print("\n产品信息表：")
    print(products)
    print("\n订单详情表：")
    print(order_details)
    
    # TODO: 1. 内连接
    # 将客户信息和订单信息进行内连接
    # 只保留两个表中都存在的客户
    
    # TODO: 2. 左连接
    # 将客户信息和订单信息进行左连接
    # 保留所有客户，即使没有订单
    
    # TODO: 3. 右连接
    # 将客户信息和订单信息进行右连接
    # 保留所有订单，即使客户信息不存在
    
    # TODO: 4. 外连接
    # 将客户信息和订单信息进行外连接
    # 保留所有记录
    
    # TODO: 5. 多表连接
    # 将订单、订单详情、产品信息三个表连接
    # 创建完整的订单分析表
    
    # TODO: 6. 使用concat()连接
    # 创建两个月的销售数据，然后纵向连接
    
    # TODO: 7. 处理重复列名
    # 当两个表有相同列名时，如何处理
    
    # TODO: 8. 数据验证
    # 检查合并后的数据完整性
    # 查找可能的数据质量问题
    
    print("\n练习7完成提示：")
    print("- 掌握了不同类型的数据合并")
    print("- 学会了处理多表连接")
    print("- 了解了数据合并中的常见问题")
    print("- 进行了数据完整性验证")


def exercise_8_comprehensive_analysis():
    """
    练习8: 综合分析项目
    
    任务：
    综合运用前面学到的所有技能，完成一个完整的数据分析项目
    """
    print("\n=== 练习8: 综合分析项目 ===")
    
    # 创建一个电商平台的综合数据集
    np.random.seed(42)
    
    # 用户数据
    users = pd.DataFrame({
        '用户ID': range(1, 1001),
        '年龄': np.random.normal(30, 10, 1000).astype(int),
        '性别': np.random.choice(['男', '女'], 1000),
        '城市': np.random.choice(['北京', '上海', '广州', '深圳', '杭州', '成都'], 1000),
        '注册日期': pd.date_range('2020-01-01', periods=1000, freq='D')[:1000]
    })
    
    # 订单数据
    orders = pd.DataFrame({
        '订单ID': range(1, 5001),
        '用户ID': np.random.choice(range(1, 1001), 5000),
        '订单金额': np.random.exponential(200, 5000),
        '订单日期': pd.date_range('2023-01-01', periods=5000, freq='H')[:5000],
        '产品类别': np.random.choice(['电子产品', '服装', '食品', '家居', '图书'], 5000),
        '支付方式': np.random.choice(['支付宝', '微信', '信用卡'], 5000)
    })
    
    print("数据集创建完成")
    print(f"用户数据: {users.shape}")
    print(f"订单数据: {orders.shape}")
    
    # TODO: 项目任务
    """
    请完成以下分析任务：
    
    1. 数据探索和清洗
       - 检查数据质量
       - 处理异常值和缺失值
       - 数据类型转换
    
    2. 用户分析
       - 用户年龄分布
       - 用户地域分布
       - 用户注册趋势
    
    3. 订单分析
       - 订单金额分布
       - 订单时间趋势
       - 产品类别分析
       - 支付方式分析
    
    4. 用户行为分析
       - 用户消费能力分析
       - 用户活跃度分析
       - 用户生命周期分析
    
    5. 业务洞察
       - 高价值用户识别
       - 产品推荐策略
       - 营销策略建议
    
    6. 数据可视化
       - 创建至少5个有意义的图表
       - 制作数据仪表板
    
    7. 报告总结
       - 总结主要发现
       - 提出业务建议
       - 识别潜在问题
    """
    
    print("\n综合分析项目任务：")
    print("1. 数据探索和清洗")
    print("2. 用户分析")
    print("3. 订单分析")
    print("4. 用户行为分析")
    print("5. 业务洞察")
    print("6. 数据可视化")
    print("7. 报告总结")
    
    print("\n开始你的分析吧！")
    
    return users, orders


def main():
    """
    主函数 - 运行所有练习
    """
    print("Pandas基础练习题")
    print("=" * 60)
    
    # 运行练习（学生可以选择性运行）
    
    # 练习1: DataFrame基础操作
    # df_students = exercise_1_basic_operations()
    
    # 练习2: 数据选择和筛选
    # exercise_2_data_selection()
    
    # 练习3: 数据清洗
    # exercise_3_data_cleaning()
    
    # 练习4: 基本统计分析
    # exercise_4_basic_statistics()
    
    # 练习5: 分组和聚合操作
    # exercise_5_groupby_operations()
    
    # 练习6: 时间序列基础
    # exercise_6_time_series_basic()
    
    # 练习7: 数据合并和连接
    # exercise_7_data_merging()
    
    # 练习8: 综合分析项目
    # users, orders = exercise_8_comprehensive_analysis()
    
    print("\n" + "=" * 60)
    print("练习说明：")
    print("1. 每个练习都有明确的TODO任务")
    print("2. 请按照注释提示完成代码")
    print("3. 可以参考demo.py和examples中的示例")
    print("4. 完成后可以查看solutions目录中的参考答案")
    print("5. 建议按顺序完成，后面的练习会用到前面的知识")
    print("=" * 60)


if __name__ == "__main__":
    main()